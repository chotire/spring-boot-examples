debug: true

server:
  address: 127.0.0.1 #adress를 지정하지 않으면 spring.boot.admin에서 host네임을 이용하여 접근하여 정상적으로 서비스가 안 됨. 때문에 address를 지정해야 함
  port: 8080
  tomcat:
    basedir: target/tomcat #tomcat의 access 로그를 남기기 위해 tomcat 기본 경로를 설정
    accesslog:
      enabled: true
      pattern: '%h %t "%r" %s %b'

info: #actuator의 info endpoint에 전달하는 정보를 이렇게 파일에 설정할 수 있다.
  app:
    name: Spring Actuator Example
    description: Spring Actuator Working Examples
    version: 1.0

logging:
  file: target/tomcat/logs/app.log
  
management:
  address: 127.0.0.1
  port: 8081 #app의 서비스 포트(위 설정으로는 8080)와 actuator의 서버스 포트가 같다면 보안상 종지 않으므로 별도의 포트로 서비스
  context-path: /management #actuator 서버스 context path
  security:
    enabled: true #actuator의 endpoint는 서버의 민감한 정보들을 제공하므로 spring security와 통합하여 접근을 제어 

endpoints: #actuator의 endpoint에 접근하여 서버를 shutdown 시킬 수 있는 기능을 활성화 (production 환경에서는 사용하면 안 되겠지??)
  shutdown:
    enabled: true

security: #spring security 로그인 아이디/패스워드 
  basic:
    enabled: true
  user:
    name: admin
    password: admin

shell: #remote shell을 통해 서비스 모니터링 (putty와 같은 터미널 도구로 -> ssh -p 2000 chotire@localhost로 접속)
  auth: 
    simple:
      user:
        name: chotire
        password: shell
  ssh:
    port: 2000 #디폴트 포트가 원래 2000.. 포트 변경 원할 때 변경~

#위 remote shell의 웹버전?
spring:
  boot:
    admin:
      url: http://127.0.0.1:8080/console
      username: admin #spring boot admin의 부팅될 때 actuator endpoints들에 접근하는데 이 때 spring security에 의해 접근이 제한되므로 인증을 받아야 한다. 
      password: admin #security.user.name, security.user.password 와 동일한 값을 입력
      context-path: /console
      client:
        prefer-ip: true
        name: actuator-examples(by chotire)